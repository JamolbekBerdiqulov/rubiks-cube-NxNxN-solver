profiling notes
---------------
gcc -O3 -o ida_search rubikscubennnsolver/ida_search_core.c rubikscubennnsolver/ida_search.c rubikscubennnsolver/rotate_xxx.c rubikscubennnsolver/ida_search_444.c rubikscubennnsolver/ida_search_666.c rubikscubennnsolver/ida_search_777.c rubikscubennnsolver/xxhash.c -lm -pg
gprof ida_search  gmon.out > prof_output; head -n 20 prof_output


todo
----
- clean up cube_copy and cube_tmp?

- verify everything works on a pi3

- switch to click

- clean up /home/dwalton/rubiks-cube-lookup-tables/rubikscubelookuptables/builder777.py

- chop md5 stuff and version the lookup tables

- write docs

- chop "dummy" references

- chop rubikscubennnsolver/LookupTableIDAViaGraph.py build_ida_graph and utils/convert-pt-state-to-perfect-hash.py

- make 555 phase6 perfect hash
  - rubiks-cube-lookup-tables: chop Build555PairLastEightEdgesCentersOnly
  - rubiks-cube-lookup-tables: rebuild Build555PairLastEightEdgesEdgesOnly, renumber the table filename to step64
  - rubiks-cube-lookup-tables: add build-perfect-hash.py support for this table
  - chop LookupTableIDA555Phase6Edges

555
===
555 experiment with eliminating phase4...working on this now

- time test.py

5x5x5 avg solution 76.66 steps
5x5x5 min solution 69 steps (DUFLUDDLRDRLUFBBDRFRBUBFDLDLBLUFLUUUBRFBLBUDRBFLLLLFULFULUBBFDFRRDRUDBDDURURRFBRFLDLLFBDRDRRDRDFLDRUFFBRDFFBLLUDLLRBFRULRUDUBFBLBRRBFUDDFBBLFUUBDBFRUU)
5x5x5 max solution 80 steps (BDRUFFDRDBLBUBBULRFLBFFUUFFUURDLDRFLBRDRLLLUDRLLFRRRLBLDBURRRDFUDDUFFULDDBFDFBLDRFUUDDLDBUUUFRULBFLDULBFUBBLDLRULLDUFDDFDRFBBURURLRRFBDBRBFFBLRBLBBURF)
real    90m52.299s

6x6x6 took 24m 54s
7x7x7 took 21m 17s
8x8x8 took 9m 42s
9x9x9 took 15m 5s
10x10x10 took 30m 29s

latest 5x5x5 took 173m...I thought it was going to be faster :(
putting the "sorted(set(pt_states))" back in brought this down to 93m...wow!!

Using the three-edge perfect-hash should speed this up a good bit. For the 5x5x5 cube in the README the three
edges that are paired are RF, UL and DF with FU being the 4th edges in the x-plane.

5x5x5: x-plane edges paired, LR FB centers vertical bars, 13 steps, 43 total steps
==================================================================================
           D D B D R 
           U U D D F 
           D D U U D 
           D U D D U 
           U B U B D 

R B R R B  L R R L F  L R L L F  D R R L B 
R R L R U  L F F B D  F L R L F  U F B B F 
R R L R U  L F F B D  F L R L F  U F B B F 
R R L R U  L F F B D  F L R L F  U F B B F 
R D B L U  B B L L U  F R D L L  D R L D U 

           R U B B L 
           F U U D B 
           U U D U B 
           B D D U D 
           F B F U B 
           

666
===
# This takes 41s
./ida_search_via_graph \
  --prune-table-0-filename lookup-tables/lookup-table-6x6x6-step00-inner-x-centers-stage.bin --prune-table-0-state 14592 \
  --kociemba ........Lx...xLLL..LLxx...xx................xx...Lxxx..LxxL...xL................xx...xLxL..xxxL...Lx................xx...xLxL..xxLL...xx................xx...xxxx..xxLL...LL................xx...xxLx..xxxx...Lx........ \
  --centers-only \
  --type 6x6x6-LR-oblique-edges-inner-x-centers-stage \
  --legal-moves "U,U',U2,Uw,Uw',Uw2,3Uw,3Uw',3Uw2,L,L',L2,Lw,Lw',Lw2,3Lw,3Lw',3Lw2,F,F',F2,Fw,Fw',Fw2,3Fw,3Fw',3Fw2,R,R',R2,Rw,Rw',Rw2,3Rw,3Rw',3Rw2,B,B',B2,Bw,Bw',Bw2,3Bw,3Bw',3Bw2,D,D',D2,Dw,Dw',Dw2,3Dw,3Dw',3Dw2"

# This takes 55s
./ida_search_via_graph \
  --prune-table-0-filename lookup-tables/lookup-table-6x6x6-step11-UD-inner-x-centers-stage.bin --prune-table-0-state 11594 \
  --orbit0-need-odd-w --orbit1-need-odd-w \
  --kociemba ........UU...Uxxx..xxUx...xU....................................................Ux...xUUU..xUUU...xx................UU...xUxU..xxxU...Ux....................................................xx...xUxx..UxUU...UU........ \
  --centers-only \
  --type 6x6x6-UD-oblique-edges-inner-x-centers-stage \
  --legal-moves "U,U',U2,Uw2,3Uw2,Lw,Lw',Lw2,3Lw,3Lw',3Lw2,F,F',F2,Fw2,3Fw2,Rw,Rw',Rw2,3Rw,3Rw',3Rw2,B,B',B2,Bw2,3Bw2,D,D',D2,Dw2,3Dw2"

We need a heuristic that is more accurate than unpaired count (much easier said than done) or use
multiple threads.